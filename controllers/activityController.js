const {activityDB} = require('../database/userData');
const {isUserAlreadyEnrolled} = require("../utils/validation")

//Listar todas as atividades dispon칤veis (P칰blico)
const listActivities = (req, res) => {
    activityDB.readAllData((err, atividades) => {
        if (err) {
            return res.status(500).json({ message: 'Erro ao buscar atividades' });
        }
        // 游댳 Converter JSON armazenado como string em objetos reais
        const atividadesFormatadas = atividades.map(entry => {
            try {
                return JSON.parse(entry.value); // 游댠 Converte string JSON para objeto real
            } catch (error) {
                console.error("Erro ao converter atividade:", entry);
                return null; // Ignorar entradas corrompidas
            }
        }).filter(activity => activity !== null); // Remove atividades inv치lidas

        console.log("Atividades encontradas:", atividadesFormatadas); // 游댌 Debug
        res.json(atividadesFormatadas);
    });
};

//Inscrever usu치rio em uma atividade (Usu치rio)
const enrollActivity = (req, res) => {
    const { activityId } = req.params;
    const userId = req.user.id; // Pegando ID do usu치rio autenticado (vem do middleware JWT)

    console.log("Buscando atividades:", activityId)

    activityDB.get(activityId, (err, activity) => {
        if (err || !activity) {
            return res.status(404).json({ message: 'Atividade n칚o encontrada' });
        }

        if (isUserAlreadyEnrolled(userId, activity.inscritos)) {
            return res.status(400).json({ message: 'Voc칡 j치 est치 inscrito nesta atividade' });
        }

        if (activity.inscritos.length >= activity.maxParticipantes) {
            return res.status(400).json({ message: 'A atividade j치 atingiu o limite de participantes' });
        }

        activity.inscritos.push(userId);

        activityDB.put(activityId, activity, (err) => {
            if (err) {
                return res.status(500).json({ message: 'Erro ao inscrever na atividade' });
            }
            res.json({ message: 'Inscri칞칚o realizada com sucesso!', atividade: activity });
        });
    });
};

//Cancelar inscri칞칚o em uma atividade (Usu치rio)
const cancelEnrollment = (req, res) => {
    const { activityId } = req.params;
    const userId = req.user.id;

    activityDB.get(activityId, (err, activity) => {
        if (err || !activity) {
            return res.status(404).json({ message: 'Atividade n칚o encontrada' });
        }

        if (!activity.inscritos.includes(userId)) {
            return res.status(400).json({ message: 'Voc칡 n칚o est치 inscrito nesta atividade' });
        }

        activity.inscritos = activity.inscritos.filter(id => id !== userId);

        activityDB.put(activityId, activity, (err) => {
            if (err) {
                return res.status(500).json({ message: 'Erro ao cancelar inscri칞칚o' });
            }
            res.json({ message: 'Inscri칞칚o cancelada com sucesso!', atividade: activity });
        });
    });
};

//Procurar atividades do usu치rio
const getUserEnrolledActivities = (req, res) => {
    const userId = req.user.id;

    activityDB.readAllData((err, activities) => {
        if (err) {
            return res.status(500).json({ message: "Erro ao buscar atividades" });
        }

        // Processando as atividades do readAllData
        const processedActivities = activities
            .map(entry => {
                const activity = JSON.parse(entry.value); // Usando parse no readAllData
                return activity;
            })
            .filter(activity => {
                return activity.inscritos.includes(userId);//Filtrando atividades que incluem o usu치rio
            });

        res.json(processedActivities);
    });
};

module.exports = { getUserEnrolledActivities,listActivities, enrollActivity, cancelEnrollment };
